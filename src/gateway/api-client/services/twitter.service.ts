import { createHmac } from 'crypto';
import OAuth from 'oauth-1.0a';

import { HttpService } from '@nestjs/axios';
import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { ApiProperty } from '@nestjs/swagger';

import { HttpResponse } from '@core/dto/response';
import { HttpWrapperService } from '@core/http/http-wrapper.service';

export class TwitterLoginDto {
  @ApiProperty({
    example: '',
  })
  oauth_token: string;

  @ApiProperty({
    example: '',
  })
  @ApiProperty()
  oauth_verifier: string;
}

export interface TwitterUserProfile {
  id: number;
  id_str: string;
  name: string;
  screen_name: string;
  location: string;
  profile_location: null;
  description: string;
  url: null;
  entities: {
    description: { urls: any[] };
  };
  protected: boolean;
  followers_count: number;
  friends_count: number;
  listed_count: number;
  created_at: string;
  favourites_count: number;
  utc_offset: null;
  time_zone: null;
  geo_enabled: boolean;
  verified: boolean;
  statuses_count: number;
  lang: null;
  contributors_enabled: boolean;
  is_translator: boolean;
  is_translation_enabled: boolean;
  profile_background_color: string;
  profile_background_image_url: null;
  profile_background_image_url_https: null;
  profile_background_tile: boolean;
  profile_image_url: string;
  profile_image_url_https: string;
  profile_banner_url: string;
  profile_link_color: string;
  profile_sidebar_border_color: string;
  profile_sidebar_fill_color: string;
  profile_text_color: string;
  profile_use_background_image: boolean;
  has_extended_profile: boolean;
  default_profile: boolean;
  default_profile_image: boolean;
  following: null;
  follow_request_sent: null;
  notifications: null;
  translator_type: string;
  withheld_in_countries: any[];
}

export interface TwitterAuthenticationData {
  oauth_token: string;
  oauth_token_secret: string;
  user_id: string;
  screen_name: string;
}

// Generated by https://quicktype.io

export interface TwitterUserProfileV2 {
  verified: boolean;
  name: string;
  location: string;
  created_at: string;
  username: string;
  description: string;
  profile_image_url: string;
  url: string;
  id: string;
  protected: boolean;
}

@Injectable()
export class TwitterService extends HttpWrapperService {
  private oauth: OAuth;
  private bearerToken: string;
  constructor(
    protected httpService: HttpService,
    protected configService: ConfigService,
  ) {
    super(httpService);

    this.bearerToken = this.configService.get('TWITTER_BEARER_TOKEN');
    const consumer = {
      key: this.configService.get('TWITTER_CONSUMER_KEY'),
      secret: this.configService.get('TWITTER_CONSUMER_SECRET'),
    };
    this.oauth = new OAuth({
      consumer,
      signature_method: 'HMAC-SHA1',
      hash_function(base_string, key) {
        return createHmac('sha1', key).update(base_string).digest('base64');
      },
    });
  }

  async getOAuthToken(
    logId: string,
  ): Promise<HttpResponse<{
    oauth_token: string;
    oauth_token_secret: string;
    oauth_callback_confirmed: string;
  }> | null> {
    const url = 'https://api.twitter.com/oauth/request_token';
    const method = 'POST';
    const authorization = this.oauth.authorize({ url, method });
    const headers = this.oauth.toHeader(authorization) as any;
    const result = await this.send<string>(logId, { url, headers, method });
    if (!result?.data) return null;

    const data = result.data.split('&').reduce((acc, item) => {
      const [key, value] = item.split('=');
      return { ...acc, [key]: value };
    }, {}) as any;

    return { success: true, data };
  }

  async verifyOAuthResponse(
    logId: string,
    { oauth_token, oauth_verifier }: TwitterLoginDto,
  ): Promise<HttpResponse<TwitterAuthenticationData> | null> {
    const url = 'https://api.twitter.com/oauth/access_token';
    const method = 'POST';

    // Your OAuth and headers code here...
    const authorization = this.oauth.authorize({ url, method });
    const headers = this.oauth.toHeader(authorization) as any;

    const result = await this.send<string>(logId, {
      url,
      headers,
      method,
      params: { oauth_token, oauth_verifier },
    });
    if (!result?.data) return null;

    const data = result.data.split('&').reduce((acc, item) => {
      const [key, value] = item.split('=');
      return { ...acc, [key]: value };
    }, {}) as TwitterAuthenticationData;

    return { success: true, data };
  }

  async getProfileV1(
    logId: string,
    screen_name: string,
  ): Promise<HttpResponse<TwitterUserProfile> | null> {
    const url = `https://api.twitter.com/1.1/users/show.json`;
    const method = 'GET';
    const params = { screen_name };

    const authorization = this.oauth.authorize({ url, method, data: params });
    const headers = this.oauth.toHeader(authorization) as any;

    const result = await this.send<TwitterUserProfile>(logId, {
      url,
      headers,
      method,
      params,
    });
    if (!result?.data) return null;

    const { data } = result;
    return { success: true, data };
  }

  async getProfile(
    logId: string,
    username: string,
  ): Promise<HttpResponse<TwitterUserProfileV2> | null> {
    const url = `https://api.twitter.com/2/users/by/username/${username}`;
    const method = 'GET';

    const headers = {
      Authorization: `Bearer ${this.bearerToken}`,
    };

    const params = {
      'user.fields':
        'description,id,location,name,profile_image_url,username,verified',
    };
    const result = await this.send<{ data: TwitterUserProfileV2 }>(logId, {
      url,
      headers,
      method,
      params,
    });
    if (!result?.data?.data) return { success: false };

    return { success: true, data: result?.data?.data };
  }
}
